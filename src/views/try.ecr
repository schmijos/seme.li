<header id="form-try-header">
  <a href="/"><%= render("src/images/logo.svg") %></a>
  <h1>Semel Secure Message</h1>
  <span>Retrieve secret passwords or messages. Once.</span>
</header>

<main>
  <section id="form-try">
    <script id="script-lib">
      // Here is the crypto library to retrieve and reveal secrets.

      async function consumeAndDecrypt() {
        const { ciphertext } = await consumeRemotely(secretIdFromHash());

        if(ciphertext) {
          const key = secretKeyFromHash() || secretKeyFromInput();
          const plaintext = await decryptLocally(ciphertext, key);
          showPlaintext(plaintext);
        } else {
          showPlaintext('Sorry, but this secret doesn\'t exist (anymore).');
        }
      }

      async function consumeRemotely(id) {
        const response = await fetch(`/consume/${id}`, {
          method: 'DELETE',
          headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
        });

        return await response.json();
      }

      async function decryptLocally(ciphertext, secretKey) {
        const key = await crypto.subtle.importKey(
          'raw',
          to_buffer(secretKey),
          { name: "AES-GCM", length: 256 },
          true,
          ["decrypt"]
        );

        const plaintext = await window.crypto.subtle.decrypt(
          { name: "AES-GCM", iv: new Uint8Array(12) }, // fixed IV because every key is used only once
          key,
          to_buffer(ciphertext)
        );

        return (new TextDecoder).decode(plaintext)
      }

      function to_buffer(base64str) {
        return Uint8Array.from(atob(base64str), c => c.charCodeAt(0))
      }
    </script>

    <script id="script-dom">
      // Here is the DOM tooling. It doesn't act on its own but should be triggered by inline event handlers.

      function secretIdFromHash()        { return location.hash.substring(1).split(':').filter(x => x)[0]; }
      function secretKeyFromHash()       { return location.hash.substring(1).split(':').filter(x => x)[1]; }
      function secretKeyFromInput()      { return document.getElementById('secret-key').value; }
      function showPlaintext(plaintext)  {
        document.getElementById('plaintext').value = plaintext;
        document.getElementById('plaintext-container').style.removeProperty('display');
        document.getElementById('form-try').remove();
      }
      document.addEventListener('DOMContentLoaded', function() {
        if(!secretKeyFromHash()) {
          document.getElementById('secret-key-container').style.display = 'block';
        }
      });
    </script>

    <div id="secret-key-container" style="display: none">
      <!-- This input can be used to manually provide the secret key if this document is not considered trustworthy -->
      <label for="secret-key">Enter secret key</label>
      <input type="text" id="secret-key">
    </div>

    <button id="submit" onclick="consumeAndDecrypt()">
      Reveal secret
    </button>
  </section>

  <section id="plaintext-container" style="display: none">
    <!-- There's deliverately no copy-to-clipboard button here. No JavaScript should be needed after reveal -->
    <label for="plaintext">
      Secret
      <br>
      <span>It can be seen only once.</span>
    </label>
    <textarea id="plaintext" disabled rows="7"></textarea>
  </section>
</main>
